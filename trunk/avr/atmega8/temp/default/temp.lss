
temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00000238  000002ac  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000071  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027a  00000000  00000000  0000033d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d4  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f6  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000188  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	bf c0       	rjmp	.+382    	; 0x192 <__vector_9>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	2f c0       	rjmp	.+94     	; 0x86 <SevenSegment+0x14>
  28:	30 c0       	rjmp	.+96     	; 0x8a <SevenSegment+0x18>
  2a:	31 c0       	rjmp	.+98     	; 0x8e <SevenSegment+0x1c>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <SevenSegment+0x20>
  2e:	33 c0       	rjmp	.+102    	; 0x96 <SevenSegment+0x24>
  30:	34 c0       	rjmp	.+104    	; 0x9a <SevenSegment+0x28>
  32:	35 c0       	rjmp	.+106    	; 0x9e <SevenSegment+0x2c>
  34:	36 c0       	rjmp	.+108    	; 0xa2 <SevenSegment+0x30>
  36:	37 c0       	rjmp	.+110    	; 0xa6 <SevenSegment+0x34>
  38:	38 c0       	rjmp	.+112    	; 0xaa <SevenSegment+0x38>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	e8 e3       	ldi	r30, 0x38	; 56
  4e:	f2 e0       	ldi	r31, 0x02	; 2
  50:	02 c0       	rjmp	.+4      	; 0x56 <.do_copy_data_start>

00000052 <.do_copy_data_loop>:
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0

00000056 <.do_copy_data_start>:
  56:	a0 36       	cpi	r26, 0x60	; 96
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <.do_copy_data_loop>

0000005c <__do_clear_bss>:
  5c:	10 e0       	ldi	r17, 0x00	; 0
  5e:	a0 e6       	ldi	r26, 0x60	; 96
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a4 36       	cpi	r26, 0x64	; 100
  68:	b1 07       	cpc	r27, r17
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	66 d0       	rcall	.+204    	; 0x13a <main>
  6e:	e2 c0       	rjmp	.+452    	; 0x234 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__heap_end>

00000072 <SevenSegment>:

uint8_t digits[3];   //Holds the digits for 3 displays


void SevenSegment(uint8_t n,uint8_t dp)
{
  72:	8a 30       	cpi	r24, 0x0A	; 10
  74:	00 f5       	brcc	.+64     	; 0xb6 <SevenSegment+0x44>
Note:
n must be less than 9
*/
   if(n<10)
   {
      switch (n)
  76:	e8 2f       	mov	r30, r24
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	ea 30       	cpi	r30, 0x0A	; 10
  7c:	f1 05       	cpc	r31, r1
  7e:	b8 f4       	brcc	.+46     	; 0xae <SevenSegment+0x3c>
  80:	ed 5e       	subi	r30, 0xED	; 237
  82:	ff 4f       	sbci	r31, 0xFF	; 255
  84:	09 94       	ijmp
      {
         case 0:
		 SEVEN_SEGMENT_PORT=0b01111110;
  86:	8e e7       	ldi	r24, 0x7E	; 126
  88:	11 c0       	rjmp	.+34     	; 0xac <SevenSegment+0x3a>
         break;

         case 1:
		 SEVEN_SEGMENT_PORT=0b00001100;
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	0f c0       	rjmp	.+30     	; 0xac <SevenSegment+0x3a>
         break;

         case 2:
		 SEVEN_SEGMENT_PORT=0b10110110;
  8e:	86 eb       	ldi	r24, 0xB6	; 182
  90:	0d c0       	rjmp	.+26     	; 0xac <SevenSegment+0x3a>
         break;

         case 3:
		 SEVEN_SEGMENT_PORT=0b10011110;
  92:	8e e9       	ldi	r24, 0x9E	; 158
  94:	0b c0       	rjmp	.+22     	; 0xac <SevenSegment+0x3a>
         break;

         case 4:
		 SEVEN_SEGMENT_PORT=0b11001100;
  96:	8c ec       	ldi	r24, 0xCC	; 204
  98:	09 c0       	rjmp	.+18     	; 0xac <SevenSegment+0x3a>
         break;

         case 5:
		 SEVEN_SEGMENT_PORT=0b11011010;
  9a:	8a ed       	ldi	r24, 0xDA	; 218
  9c:	07 c0       	rjmp	.+14     	; 0xac <SevenSegment+0x3a>
         break;

         case 6:
		 SEVEN_SEGMENT_PORT=0b11111000;
  9e:	88 ef       	ldi	r24, 0xF8	; 248
  a0:	05 c0       	rjmp	.+10     	; 0xac <SevenSegment+0x3a>
         break;

         case 7:
		 SEVEN_SEGMENT_PORT=0b00001110;
  a2:	8e e0       	ldi	r24, 0x0E	; 14
  a4:	03 c0       	rjmp	.+6      	; 0xac <SevenSegment+0x3a>
         break;

         case 8:
		 SEVEN_SEGMENT_PORT=0b11111110;
  a6:	8e ef       	ldi	r24, 0xFE	; 254
  a8:	01 c0       	rjmp	.+2      	; 0xac <SevenSegment+0x3a>
         break;

         case 9:
		 SEVEN_SEGMENT_PORT=0b11001110;
  aa:	8e ec       	ldi	r24, 0xCE	; 206
  ac:	82 bb       	out	0x12, r24	; 18
         break;
      }
      if(dp)
  ae:	66 23       	and	r22, r22
  b0:	21 f0       	breq	.+8      	; 0xba <SevenSegment+0x48>
      {
         //if decimal point should be displayed

         //make 0th bit High
         SEVEN_SEGMENT_PORT |= 0b00000001;
  b2:	90 9a       	sbi	0x12, 0	; 18
  b4:	08 95       	ret
   }
   else
   {
      //This symbol on display tells that n was greater than 9
      //so display can't handle it
	  SEVEN_SEGMENT_PORT=0b10000000;
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	08 95       	ret

000000bc <Wait>:
   }
}

void Wait()
{
  bc:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	ca 01       	movw	r24, r20
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <Wait+0x8>
   uint8_t i;
   for(i=0;i<10;i++)
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	2a 30       	cpi	r18, 0x0A	; 10
  cc:	d1 f7       	brne	.-12     	; 0xc2 <Wait+0x6>
   {
      _delay_loop_2(0);
   }
}
  ce:	08 95       	ret

000000d0 <Print>:

void Print(uint16_t num)
{
  d0:	9c 01       	movw	r18, r24
   uint8_t i=0;
   uint8_t j;
   if(num>999) return;
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	28 3e       	cpi	r18, 0xE8	; 232
  d6:	38 07       	cpc	r19, r24
  d8:	f0 f4       	brcc	.+60     	; 0x116 <Print+0x46>
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	0f c0       	rjmp	.+30     	; 0xfc <Print+0x2c>


   while(num)
   {
      digits[i]=num%10;
  de:	e4 2f       	mov	r30, r20
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ef 59       	subi	r30, 0x9F	; 159
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	c9 01       	movw	r24, r18
  e8:	6a e0       	ldi	r22, 0x0A	; 10
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	8f d0       	rcall	.+286    	; 0x20c <__udivmodhi4>
  ee:	80 83       	st	Z, r24
      i++;
  f0:	4f 5f       	subi	r20, 0xFF	; 255

      num=num/10;
  f2:	c9 01       	movw	r24, r18
  f4:	6a e0       	ldi	r22, 0x0A	; 10
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	89 d0       	rcall	.+274    	; 0x20c <__udivmodhi4>
  fa:	9b 01       	movw	r18, r22
   uint8_t i=0;
   uint8_t j;
   if(num>999) return;


   while(num)
  fc:	21 15       	cp	r18, r1
  fe:	31 05       	cpc	r19, r1
 100:	71 f7       	brne	.-36     	; 0xde <Print+0xe>
 102:	84 2f       	mov	r24, r20
 104:	06 c0       	rjmp	.+12     	; 0x112 <Print+0x42>
      digits[i]=num%10;
      i++;

      num=num/10;
   }
   for(j=i;j<3;j++) digits[j]=0;
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ef 59       	subi	r30, 0x9F	; 159
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	10 82       	st	Z, r1
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	c0 f3       	brcs	.-16     	; 0x106 <Print+0x36>
 116:	08 95       	ret

00000118 <InitADC>:
}


void InitADC()
{
 118:	80 e4       	ldi	r24, 0x40	; 64
 11a:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);// For Aref=AVcc;
ADCSRA=(1<<ADEN)|(7<<ADPS0);
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	86 b9       	out	0x06, r24	; 6
}
 120:	08 95       	ret

00000122 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
 122:	97 b1       	in	r25, 0x07	; 7
 124:	87 70       	andi	r24, 0x07	; 7
 126:	89 2b       	or	r24, r25
 128:	87 b9       	out	0x07, r24	; 7
   ch = ch & 0b00000111;
   ADMUX|=ch;

   //Start Single conversion

   ADCSRA|=(1<<ADSC);
 12a:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
 12c:	34 9b       	sbis	0x06, 4	; 6
 12e:	fe cf       	rjmp	.-4      	; 0x12c <ReadADC+0xa>

   //Clear ADIF by writing one to it
   ADCSRA|=(1<<ADIF);
 130:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
 132:	24 b1       	in	r18, 0x04	; 4
 134:	35 b1       	in	r19, 0x05	; 5
}
 136:	c9 01       	movw	r24, r18
 138:	08 95       	ret

0000013a <main>:




void main()
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
   uint16_t adc_value;
   uint8_t t;
   // Prescaler = FCPU/1024
   TCCR0|=(1<<CS02);
 13e:	83 b7       	in	r24, 0x33	; 51
 140:	84 60       	ori	r24, 0x04	; 4
 142:	83 bf       	out	0x33, r24	; 51

   //Enable Overflow Interrupt Enable
   TIMSK|=(1<<TOIE0);
 144:	89 b7       	in	r24, 0x39	; 57
 146:	81 60       	ori	r24, 0x01	; 1
 148:	89 bf       	out	0x39, r24	; 57

   //Initialize Counter

   TCNT0=0;
 14a:	12 be       	out	0x32, r1	; 50

   //Port B[2,1,0] as out put
   DDRB|=0b00000111;
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	87 60       	ori	r24, 0x07	; 7
 150:	87 bb       	out	0x17, r24	; 23

   PORTB=0b00000001;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	88 bb       	out	0x18, r24	; 24

   //Port D
   SEVEN_SEGMENT_DDR=0XFF;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	81 bb       	out	0x11, r24	; 17

   //Turn off all segments

   SEVEN_SEGMENT_PORT=0X00;
 15a:	12 ba       	out	0x12, r1	; 18

   //Enable Global Interrupts
   sei();
 15c:	78 94       	sei
}


void InitADC()
{
ADMUX=(1<<REFS0);// For Aref=AVcc;
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(7<<ADPS0);
 162:	87 e8       	ldi	r24, 0x87	; 135
 164:	86 b9       	out	0x06, r24	; 6
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch = ch & 0b00000111;
   ADMUX|=ch;
 16a:	87 b1       	in	r24, 0x07	; 7
 16c:	87 b9       	out	0x07, r24	; 7

   //Start Single conversion

   ADCSRA|=(1<<ADSC);
 16e:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
 170:	34 9b       	sbis	0x06, 4	; 6
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0x36>

   //Clear ADIF by writing one to it
   ADCSRA|=(1<<ADIF);
 174:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
 176:	84 b1       	in	r24, 0x04	; 4
 178:	95 b1       	in	r25, 0x05	; 5

      //Convert to degree Centrigrade
      t=adc_value/2;

      //Print to display
      Print(t);
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	a7 df       	rcall	.-178    	; 0xd0 <Print>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	ce 01       	movw	r24, r28
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x4c>
}

void Wait()
{
   uint8_t i;
   for(i=0;i<10;i++)
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	2a 30       	cpi	r18, 0x0A	; 10
 18e:	d1 f7       	brne	.-12     	; 0x184 <main+0x4a>
 190:	ec cf       	rjmp	.-40     	; 0x16a <main+0x30>

00000192 <__vector_9>:
   }
}

/* Timer/Counter0 Overflow */
ISR(TIMER0_OVF_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
   static uint8_t i=0;
   if(i==2)
 1b4:	80 91 60 00 	lds	r24, 0x0060
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <__vector_9+0x30>
   {
      i=0;
 1bc:	10 92 60 00 	sts	0x0060, r1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <__vector_9+0x36>
   }
   else

   {
      i++;
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 60 00 	sts	0x0060, r24
   }
   PORTB = (1<<i);
 1c8:	e0 91 60 00 	lds	r30, 0x0060
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 2e       	mov	r0, r30
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_9+0x48>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <__vector_9+0x44>
 1de:	88 bb       	out	0x18, r24	; 24
   SevenSegment(digits[i],0);
 1e0:	ef 59       	subi	r30, 0x9F	; 159
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	44 df       	rcall	.-376    	; 0x72 <SevenSegment>

}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__udivmodhi4>:
 20c:	aa 1b       	sub	r26, r26
 20e:	bb 1b       	sub	r27, r27
 210:	51 e1       	ldi	r21, 0x11	; 17
 212:	07 c0       	rjmp	.+14     	; 0x222 <__udivmodhi4_ep>

00000214 <__udivmodhi4_loop>:
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	a6 17       	cp	r26, r22
 21a:	b7 07       	cpc	r27, r23
 21c:	10 f0       	brcs	.+4      	; 0x222 <__udivmodhi4_ep>
 21e:	a6 1b       	sub	r26, r22
 220:	b7 0b       	sbc	r27, r23

00000222 <__udivmodhi4_ep>:
 222:	88 1f       	adc	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	5a 95       	dec	r21
 228:	a9 f7       	brne	.-22     	; 0x214 <__udivmodhi4_loop>
 22a:	80 95       	com	r24
 22c:	90 95       	com	r25
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
