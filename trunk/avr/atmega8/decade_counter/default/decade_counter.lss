
decade_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004c  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002c8  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011e  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000234  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f2  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b7  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ee       	ldi	r30, 0xE2	; 226
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1c d0       	rcall	.+56     	; 0x92 <main>
  5a:	41 c0       	rjmp	.+130    	; 0xde <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <Wait>:
#define SHIFT_PORT PORTD
#define SHIFT_DDR DDRD


void Wait()
{
  5e:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  60:	40 e0       	ldi	r20, 0x00	; 0
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	ca 01       	movw	r24, r20
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <Wait+0x8>
   uint8_t i;
   for(i=0;i<50;i++)
  6a:	2f 5f       	subi	r18, 0xFF	; 255
  6c:	22 33       	cpi	r18, 0x32	; 50
  6e:	d1 f7       	brne	.-12     	; 0x64 <Wait+0x6>
   {
      _delay_loop_2(0);
   }
}
  70:	08 95       	ret

00000072 <delay>:


void delay()
{
  72:	85 e0       	ldi	r24, 0x05	; 5
  74:	8a 95       	dec	r24
  76:	f1 f7       	brne	.-4      	; 0x74 <delay+0x2>
   _delay_loop_1(5);
}
  78:	08 95       	ret

0000007a <clock_4017>:

void clock_4017()
{
  7a:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	8a 95       	dec	r24
  80:	f1 f7       	brne	.-4      	; 0x7e <clock_4017+0x4>
   PORTD |= _BV(PD3);
   delay();
   PORTD &= ~(_BV(PD3));
  82:	93 98       	cbi	0x12, 3	; 18
}
  84:	08 95       	ret

00000086 <reset_4017>:

void reset_4017()
{
  86:	94 9a       	sbi	0x12, 4	; 18
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	8a 95       	dec	r24
  8c:	f1 f7       	brne	.-4      	; 0x8a <reset_4017+0x4>
   PORTD |= _BV(PD4);
   delay();
   PORTD &= ~(_BV(PD4));
  8e:	94 98       	cbi	0x12, 4	; 18
}
  90:	08 95       	ret

00000092 <main>:


void main()
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17

   //Port D
   SHIFT_DDR=0xFF; //Porta D totalmente como saida.
   
   //Porta D zerada
   SHIFT_PORT=0x00;
  96:	12 ba       	out	0x12, r1	; 18
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	65 e0       	ldi	r22, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <main+0x12>
  a2:	30 e0       	ldi	r19, 0x00	; 0

   //Infinite loop
   while(1)
   {
	  i++;
  a4:	3f 5f       	subi	r19, 0xFF	; 255
	  if (i==4)
  a6:	34 30       	cpi	r19, 0x04	; 4
  a8:	69 f4       	brne	.+26     	; 0xc4 <main+0x32>
   PORTD &= ~(_BV(PD3));
}

void reset_4017()
{
   PORTD |= _BV(PD4);
  aa:	94 9a       	sbi	0x12, 4	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ac:	86 2f       	mov	r24, r22
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1c>
   delay();
   PORTD &= ~(_BV(PD4));
  b2:	94 98       	cbi	0x12, 4	; 18
  b4:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	ca 01       	movw	r24, r20
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x26>


void Wait()
{
   uint8_t i;
   for(i=0;i<50;i++)
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	22 33       	cpi	r18, 0x32	; 50
  c0:	d1 f7       	brne	.-12     	; 0xb6 <main+0x24>
  c2:	ef cf       	rjmp	.-34     	; 0xa2 <main+0x10>
   _delay_loop_1(5);
}

void clock_4017()
{
   PORTD |= _BV(PD3);
  c4:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  c6:	86 2f       	mov	r24, r22
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x36>
   delay();
   PORTD &= ~(_BV(PD3));
  cc:	93 98       	cbi	0x12, 3	; 18
  ce:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x40>


void Wait()
{
   uint8_t i;
   for(i=0;i<50;i++)
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	22 33       	cpi	r18, 0x32	; 50
  da:	d1 f7       	brne	.-12     	; 0xd0 <main+0x3e>
  dc:	e3 cf       	rjmp	.-58     	; 0xa4 <main+0x12>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
