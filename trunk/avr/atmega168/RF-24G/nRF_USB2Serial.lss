
nRF_USB2Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  0000040c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d8  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000413  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e8  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005fb  00000000  00000000  00000aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017b  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001a6  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  88:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <rx_data_nRF2401A>:
{
    uint8_t i, j, temp;
	
	temp = 0;
	
	cbi(PORTB, _01A_CE);//Power down RF Front end
  90:	29 98       	cbi	0x05, 1	; 5
  92:	e0 e0       	ldi	r30, 0x00	; 0
  94:	f1 e0       	ldi	r31, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0d c0       	rjmp	.+26     	; 0xb4 <rx_data_nRF2401A+0x24>
    //Clock in data, we are setup for 32-bit payloads
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        for(j = 0 ; j < 8 ; j++) //8 bits each
        {
            temp <<= 1;
  9a:	99 0f       	add	r25, r25
			if(PIND & (1<<_01A_DATA)) temp |= 1;
  9c:	4f 99       	sbic	0x09, 7	; 9
  9e:	91 60       	ori	r25, 0x01	; 1

			sbi(PORTB, _01A_CLK);
  a0:	2d 9a       	sbi	0x05, 5	; 5

			cbi(PORTB, _01A_CLK);
  a2:	2d 98       	cbi	0x05, 5	; 5
	cbi(PORTB, _01A_CE);//Power down RF Front end

    //Clock in data, we are setup for 32-bit payloads
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        for(j = 0 ; j < 8 ; j++) //8 bits each
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	c1 f7       	brne	.-16     	; 0x9a <rx_data_nRF2401A+0xa>
			sbi(PORTB, _01A_CLK);

			cbi(PORTB, _01A_CLK);
        }

        rf_rx_array[i] = temp; //Store this byte
  aa:	91 93       	st	Z+, r25
	temp = 0;
	
	cbi(PORTB, _01A_CE);//Power down RF Front end

    //Clock in data, we are setup for 32-bit payloads
    for(i = 0 ; i < 4 ; i++) //4 bytes
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	e4 30       	cpi	r30, 0x04	; 4
  b0:	f8 07       	cpc	r31, r24
  b2:	11 f0       	breq	.+4      	; 0xb8 <rx_data_nRF2401A+0x28>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <rx_data_nRF2401A+0xa>
        }

        rf_rx_array[i] = temp; //Store this byte
    }

    sbi(PORTB, _01A_CE); //Power up RF Front end
  b8:	29 9a       	sbi	0x05, 1	; 5
}
  ba:	08 95       	ret

000000bc <tx_data_nRF2401A>:
//data_array must be setup before calling this function
void tx_data_nRF2401A(void)
{
    uint8_t i, j, temp, rf_address;

    sbi(PORTB, _01A_CE); //_01A_CE = 1;
  bc:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <tx_data_nRF2401A+0x4>
  c4:	30 e0       	ldi	r19, 0x00	; 0
	
			sbi(PORTB, _01A_CLK); //_01A_CLK = 1; 
			_delay_loop_1(RF_DELAY);
			cbi(PORTB, _01A_CLK); //_01A_CLK = 0;
			
			rf_address <<= 1;
  c6:	42 e3       	ldi	r20, 0x32	; 50
  c8:	11 c0       	rjmp	.+34     	; 0xec <tx_data_nRF2401A+0x30>
  ca:	99 0f       	add	r25, r25
	{
		rf_address = 0b11100111; //Power-on Default for all units (on page 11)
	
		for(i = 0 ; i < 8 ; i++)
		{
			if(rf_address & 0x80)
  cc:	97 ff       	sbrs	r25, 7
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <tx_data_nRF2401A+0x18>
				sbi(PORTD, _01A_DATA);
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <tx_data_nRF2401A+0x1a>
			else
				cbi(PORTD, _01A_DATA);
  d4:	5f 98       	cbi	0x0b, 7	; 11
	
			sbi(PORTB, _01A_CLK); //_01A_CLK = 1; 
  d6:	2d 9a       	sbi	0x05, 5	; 5
  d8:	84 2f       	mov	r24, r20
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <tx_data_nRF2401A+0x1e>
			_delay_loop_1(RF_DELAY);
			cbi(PORTB, _01A_CLK); //_01A_CLK = 0;
  de:	2d 98       	cbi	0x05, 5	; 5
    //Clock in address
	for (j = 0; j < 5; j++)
	{
		rf_address = 0b11100111; //Power-on Default for all units (on page 11)
	
		for(i = 0 ; i < 8 ; i++)
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	91 f7       	brne	.-28     	; 0xca <tx_data_nRF2401A+0xe>

    sbi(PORTB, _01A_CE); //_01A_CE = 1;
    _delay_loop_1(RF_DELAY);

    //Clock in address
	for (j = 0; j < 5; j++)
  e6:	3f 5f       	subi	r19, 0xFF	; 255
  e8:	35 30       	cpi	r19, 0x05	; 5
  ea:	19 f0       	breq	.+6      	; 0xf2 <tx_data_nRF2401A+0x36>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	97 ee       	ldi	r25, 0xE7	; 231
  f0:	ed cf       	rjmp	.-38     	; 0xcc <tx_data_nRF2401A+0x10>
  f2:	e4 e0       	ldi	r30, 0x04	; 4
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	32 e3       	ldi	r19, 0x32	; 50
	}	
    
    //Clock in the data_array
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        temp = rf_tx_array[i];
  f8:	20 81       	ld	r18, Z
  fa:	90 e0       	ldi	r25, 0x00	; 0
        
        for(j = 0 ; j < 8 ; j++) //One bit at a time
        {
			if(temp & 0x80)
  fc:	27 ff       	sbrs	r18, 7
  fe:	02 c0       	rjmp	.+4      	; 0x104 <tx_data_nRF2401A+0x48>
				sbi(PORTD, _01A_DATA);
 100:	5f 9a       	sbi	0x0b, 7	; 11
 102:	01 c0       	rjmp	.+2      	; 0x106 <tx_data_nRF2401A+0x4a>
			else
				cbi(PORTD, _01A_DATA);
 104:	5f 98       	cbi	0x0b, 7	; 11
			
			sbi(PORTB, _01A_CLK); //_01A_CLK = 1; 
 106:	2d 9a       	sbi	0x05, 5	; 5
 108:	83 2f       	mov	r24, r19
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <tx_data_nRF2401A+0x4e>
			_delay_loop_1(RF_DELAY);
			cbi(PORTB, _01A_CLK); //_01A_CLK = 0;
 10e:	2d 98       	cbi	0x05, 5	; 5
    //Clock in the data_array
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        temp = rf_tx_array[i];
        
        for(j = 0 ; j < 8 ; j++) //One bit at a time
 110:	9f 5f       	subi	r25, 0xFF	; 255
 112:	98 30       	cpi	r25, 0x08	; 8
 114:	11 f0       	breq	.+4      	; 0x11a <tx_data_nRF2401A+0x5e>
			
			sbi(PORTB, _01A_CLK); //_01A_CLK = 1; 
			_delay_loop_1(RF_DELAY);
			cbi(PORTB, _01A_CLK); //_01A_CLK = 0;
	
            temp <<= 1;
 116:	22 0f       	add	r18, r18
 118:	f1 cf       	rjmp	.-30     	; 0xfc <tx_data_nRF2401A+0x40>
 11a:	31 96       	adiw	r30, 0x01	; 1
			rf_address <<= 1;
		}
	}	
    
    //Clock in the data_array
    for(i = 0 ; i < 4 ; i++) //4 bytes
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	e8 30       	cpi	r30, 0x08	; 8
 120:	f8 07       	cpc	r31, r24
 122:	51 f7       	brne	.-44     	; 0xf8 <tx_data_nRF2401A+0x3c>
	
            temp <<= 1;
        }
    }
    
	cbi(PORTB, _01A_CE); //_01A_CE = 0; //Start transmission   
 124:	29 98       	cbi	0x05, 1	; 5
}
 126:	08 95       	ret

00000128 <config_rx_nRF2401A>:
    uint8_t i, j;
    uint32_t config_setup;

    //During configuration of the receiver, we need _01A_DATA as an output
    //1 = output, 0 = input
    _01A_PORT_DD |= (1<<_01A_DATA);  //(_01A_DR is input) (_01A_DATA is output)
 128:	57 9a       	sbi	0x0a, 7	; 10

    //Config Mode
    cbi(PORTB, _01A_CE); //_01A_CE = 0; _01A_CS = 1;
 12a:	29 98       	cbi	0x05, 1	; 5
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	98 2f       	mov	r25, r24
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <config_rx_nRF2401A+0x8>
    _delay_loop_1(RF_DELAY);
	sbi(PORTB, _01A_CS);
 134:	2a 9a       	sbi	0x05, 2	; 5
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <config_rx_nRF2401A+0xe>
 13a:	40 e0       	ldi	r20, 0x00	; 0

			sbi(PORTB, _01A_CLK);
			_delay_loop_1(RF_DELAY);
			cbi(PORTB, _01A_CLK);
			
			config_setup <<= 1;
 13c:	52 e3       	ldi	r21, 0x32	; 50
 13e:	14 c0       	rjmp	.+40     	; 0x168 <config_rx_nRF2401A+0x40>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	aa 1f       	adc	r26, r26
 146:	bb 1f       	adc	r27, r27
	{
		config_setup = 0xE7;

		for(i = 0 ; i < 8 ; i++)
		{
			if(config_setup & 0x80)
 148:	87 ff       	sbrs	r24, 7
 14a:	02 c0       	rjmp	.+4      	; 0x150 <config_rx_nRF2401A+0x28>
				sbi(_01A_PORT, _01A_DATA);
 14c:	5f 9a       	sbi	0x0b, 7	; 11
 14e:	01 c0       	rjmp	.+2      	; 0x152 <config_rx_nRF2401A+0x2a>
			else
				cbi(_01A_PORT, _01A_DATA);
 150:	5f 98       	cbi	0x0b, 7	; 11

			sbi(PORTB, _01A_CLK);
 152:	2d 9a       	sbi	0x05, 5	; 5
 154:	25 2f       	mov	r18, r21
 156:	2a 95       	dec	r18
 158:	f1 f7       	brne	.-4      	; 0x156 <config_rx_nRF2401A+0x2e>
			_delay_loop_1(RF_DELAY);
			cbi(PORTB, _01A_CLK);
 15a:	2d 98       	cbi	0x05, 5	; 5
	//Channel 1 40-bit (5-byte) address setup
    for(j = 0 ; j < 5 ; j++)
	{
		config_setup = 0xE7;

		for(i = 0 ; i < 8 ; i++)
 15c:	3f 5f       	subi	r19, 0xFF	; 255
 15e:	38 30       	cpi	r19, 0x08	; 8
 160:	79 f7       	brne	.-34     	; 0x140 <config_rx_nRF2401A+0x18>
    //Delay of 5us from CS to Data (page 30) is taken care of by the for loop
    _delay_loop_1(RF_DELAY);
	
    //Setup configuration bank	
	//Channel 1 40-bit (5-byte) address setup
    for(j = 0 ; j < 5 ; j++)
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	45 30       	cpi	r20, 0x05	; 5
 166:	31 f0       	breq	.+12     	; 0x174 <config_rx_nRF2401A+0x4c>
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	87 ee       	ldi	r24, 0xE7	; 231
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	ea cf       	rjmp	.-44     	; 0x148 <config_rx_nRF2401A+0x20>
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	9e e6       	ldi	r25, 0x6E	; 110
 17a:	a3 ea       	ldi	r26, 0xA3	; 163
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	52 e3       	ldi	r21, 0x32	; 50
	//config_setup = 0x00A36E05; //0b.1010.0011. 0110.1110. 0000.0101; 
	config_setup = 0xA36E05;

    for(i = 0 ; i < 24 ; i++)
    {
		if(config_setup & 0x00800000)
 180:	a7 ff       	sbrs	r26, 7
 182:	02 c0       	rjmp	.+4      	; 0x188 <config_rx_nRF2401A+0x60>
			sbi(_01A_PORT, _01A_DATA);
 184:	5f 9a       	sbi	0x0b, 7	; 11
 186:	01 c0       	rjmp	.+2      	; 0x18a <config_rx_nRF2401A+0x62>
		else
			cbi(_01A_PORT, _01A_DATA);
 188:	5f 98       	cbi	0x0b, 7	; 11

		sbi(PORTB, _01A_CLK);
 18a:	2d 9a       	sbi	0x05, 5	; 5
 18c:	42 e3       	ldi	r20, 0x32	; 50
 18e:	25 2f       	mov	r18, r21
 190:	2a 95       	dec	r18
 192:	f1 f7       	brne	.-4      	; 0x190 <config_rx_nRF2401A+0x68>
		_delay_loop_1(RF_DELAY);
		cbi(PORTB, _01A_CLK);
 194:	2d 98       	cbi	0x05, 5	; 5
	//Lower 24 bit setup
    //Set last bit for receive mode
	//config_setup = 0x00A36E05; //0b.1010.0011. 0110.1110. 0000.0101; 
	config_setup = 0xA36E05;

    for(i = 0 ; i < 24 ; i++)
 196:	3f 5f       	subi	r19, 0xFF	; 255
 198:	38 31       	cpi	r19, 0x18	; 24
 19a:	29 f0       	breq	.+10     	; 0x1a6 <config_rx_nRF2401A+0x7e>

		sbi(PORTB, _01A_CLK);
		_delay_loop_1(RF_DELAY);
		cbi(PORTB, _01A_CLK);
        
        config_setup <<= 1;
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	ed cf       	rjmp	.-38     	; 0x180 <config_rx_nRF2401A+0x58>
    }
    
    //Configuration is actived on falling edge of CS (page 10)
    cbi(PORTB, _01A_CE); //_01A_CE = 0; _01A_CS = 0;
 1a6:	29 98       	cbi	0x05, 1	; 5
 1a8:	84 2f       	mov	r24, r20
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <config_rx_nRF2401A+0x82>
    _delay_loop_1(RF_DELAY);
	cbi(PORTB, _01A_CS);
 1ae:	2a 98       	cbi	0x05, 2	; 5
 1b0:	84 2f       	mov	r24, r20
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <config_rx_nRF2401A+0x8a>
    _delay_loop_1(RF_DELAY);
    
    //After configuration of the receiver, we need _01A_DATA as an input
    //1 = output, 0 = input
    _01A_PORT_DD &= ~((1<<_01A_DR)|(1<<_01A_DATA));  //(_01A_DR is input) (_01A_DATA is input)
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	8f 73       	andi	r24, 0x3F	; 63
 1ba:	8a b9       	out	0x0a, r24	; 10

    //Start monitoring the air
    sbi(PORTB, _01A_CE); //_01A_CE = 1; _01A_CS = 0;
 1bc:	29 9a       	sbi	0x05, 1	; 5
 1be:	84 2f       	mov	r24, r20
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <config_rx_nRF2401A+0x98>
    _delay_loop_1(RF_DELAY);
	cbi(PORTB, _01A_CS);
 1c4:	2a 98       	cbi	0x05, 2	; 5
}    
 1c6:	08 95       	ret

000001c8 <config_tx_nRF2401A>:
void config_tx_nRF2401A(void)
{
    uint8_t i;
    uint32_t config_setup;
	
	_01A_PORT_DD |= (1<<_01A_DATA);
 1c8:	57 9a       	sbi	0x0a, 7	; 10

    //Config Mode
    cbi(PORTB, _01A_CE); //_01A_CE = 0; 
 1ca:	29 98       	cbi	0x05, 1	; 5
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	98 2f       	mov	r25, r24
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <config_tx_nRF2401A+0x8>
    _delay_loop_1(RF_DELAY);
	sbi(PORTB, _01A_CS); //_01A_CS = 1;
 1d4:	2a 9a       	sbi	0x05, 2	; 5
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <config_tx_nRF2401A+0xe>
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	84 e0       	ldi	r24, 0x04	; 4
 1de:	9e e6       	ldi	r25, 0x6E	; 110
 1e0:	a3 ea       	ldi	r26, 0xA3	; 163
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
    //Setup configuration word
    //config_setup = 0x00A36E04; //0b.0010.0011.0110.1110.0000.0100; //Look at pages 13-15 for more bit info

    for(i = 0 ; i < 24 ; i++)
    {
		if(config_setup & 0x00800000)
 1e4:	42 e3       	ldi	r20, 0x32	; 50
 1e6:	a7 ff       	sbrs	r26, 7
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <config_tx_nRF2401A+0x26>
			sbi(_01A_PORT, _01A_DATA);
 1ea:	5f 9a       	sbi	0x0b, 7	; 11
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <config_tx_nRF2401A+0x28>
		else
			cbi(_01A_PORT, _01A_DATA);
 1ee:	5f 98       	cbi	0x0b, 7	; 11
		
		sbi(PORTB, _01A_CLK); //_01A_CLK = 1;
 1f0:	2d 9a       	sbi	0x05, 5	; 5
 1f2:	24 2f       	mov	r18, r20
 1f4:	2a 95       	dec	r18
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <config_tx_nRF2401A+0x2c>
		_delay_loop_1(RF_DELAY);
		cbi(PORTB, _01A_CLK); //_01A_CLK = 0; 
 1f8:	2d 98       	cbi	0x05, 5	; 5
	
	config_setup = 0xA36E04;
    //Setup configuration word
    //config_setup = 0x00A36E04; //0b.0010.0011.0110.1110.0000.0100; //Look at pages 13-15 for more bit info

    for(i = 0 ; i < 24 ; i++)
 1fa:	3f 5f       	subi	r19, 0xFF	; 255
 1fc:	38 31       	cpi	r19, 0x18	; 24
 1fe:	29 f0       	breq	.+10     	; 0x20a <config_tx_nRF2401A+0x42>
		
		sbi(PORTB, _01A_CLK); //_01A_CLK = 1;
		_delay_loop_1(RF_DELAY);
		cbi(PORTB, _01A_CLK); //_01A_CLK = 0; 

        config_setup <<= 1;
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	aa 1f       	adc	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	ee cf       	rjmp	.-36     	; 0x1e6 <config_tx_nRF2401A+0x1e>
    }
    
    //Configuration is actived on falling edge of CS (page 10)
    cbi(PORTB, _01A_CE); //_01A_CE = 0; 
 20a:	29 98       	cbi	0x05, 1	; 5
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <config_tx_nRF2401A+0x46>
    _delay_loop_1(RF_DELAY);
	cbi(PORTB, _01A_CS); //_01A_CS = 0;
 212:	2a 98       	cbi	0x05, 2	; 5
}
 214:	08 95       	ret

00000216 <__vector_18>:
//======================



ISR (SIG_USART_RECV)//USART Receive Interrupt
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	cli();//Disable Interrupts
 238:	f8 94       	cli
	
	rf_tx_array[1] = rf_tx_array[2] = UDR0;
 23a:	80 91 c6 00 	lds	r24, 0x00C6
 23e:	80 93 06 01 	sts	0x0106, r24
 242:	80 93 05 01 	sts	0x0105, r24
	
	config_tx_nRF2401A();
 246:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <config_tx_nRF2401A>
	tx_data_nRF2401A();
 24a:	0e 94 5e 00 	call	0xbc	; 0xbc <tx_data_nRF2401A>
	config_rx_nRF2401A();
 24e:	0e 94 94 00 	call	0x128	; 0x128 <config_rx_nRF2401A>
	
	sei();//Enable Interrupts
 252:	78 94       	sei
	
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <initPWM>:
	}
}

void initPWM(){
   //set up 3 PWM channels on PB1, PB2 and PB3
   DDRB |= 0b00001000 ;   //set PB1, PB2 and PB3 as outputs
 276:	23 9a       	sbi	0x04, 3	; 4
   //timer 2 - 8 bit Fast PWM - no pre-scaler - non-inverting
   TCCR2A = (1 << WGM21) | (1<<WGM20) | (1 << COM2A1) | (0 << COM2A0);
 278:	83 e8       	ldi	r24, 0x83	; 131
 27a:	80 93 b0 00 	sts	0x00B0, r24
   TCCR2B = (0 << CS22) | (0 << CS21) | (1 << CS20);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 b1 00 	sts	0x00B1, r24
}
 284:	08 95       	ret

00000286 <ioinit>:

void ioinit(void)
{
	//1 = output, 0 = input
	DDRC = 0b00000111;//Status LEDs on PC0-2
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	97 b9       	out	0x07, r25	; 7
	DDRB = 0b00100110;
 28a:	86 e2       	ldi	r24, 0x26	; 38
 28c:	84 b9       	out	0x04, r24	; 4
	
	PORTC = 0b00000111;
 28e:	98 b9       	out	0x08, r25	; 8

	//1 = output, 0 = input
	DDRD |= 0b00000010;  //(TXD on PD1)
 290:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(0b00000001);  //(RXD on PD0)
 292:	50 98       	cbi	0x0a, 0	; 10

	//USART Baud rate: 9600
	UBRR0H = (MYUBRR>>8);
 294:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = MYUBRR;
 298:	87 e6       	ldi	r24, 0x67	; 103
 29a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 29e:	88 e9       	ldi	r24, 0x98	; 152
 2a0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2a4:	8e e0       	ldi	r24, 0x0E	; 14
 2a6:	80 93 c2 00 	sts	0x00C2, r24
}
 2aa:	08 95       	ret

000002ac <main>:
	sei();//Enable Interrupts
	
}

int main(void)
{
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
	int x=0;
	
	ioinit();
 2b6:	0e 94 43 01 	call	0x286	; 0x286 <ioinit>
	}
}

void initPWM(){
   //set up 3 PWM channels on PB1, PB2 and PB3
   DDRB |= 0b00001000 ;   //set PB1, PB2 and PB3 as outputs
 2ba:	23 9a       	sbi	0x04, 3	; 4
   //timer 2 - 8 bit Fast PWM - no pre-scaler - non-inverting
   TCCR2A = (1 << WGM21) | (1<<WGM20) | (1 << COM2A1) | (0 << COM2A0);
 2bc:	83 e8       	ldi	r24, 0x83	; 131
 2be:	80 93 b0 00 	sts	0x00B0, r24
   TCCR2B = (0 << CS22) | (0 << CS21) | (1 << CS20);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 b1 00 	sts	0x00B1, r24
	int x=0;
	
	ioinit();
	initPWM();
	
	LED = 0;
 2c8:	10 92 b3 00 	sts	0x00B3, r1

	for (x = 0; x < 4; x++)
	{
		rf_rx_array[x] = 0;
 2cc:	10 92 00 01 	sts	0x0100, r1
 2d0:	10 92 01 01 	sts	0x0101, r1
 2d4:	10 92 02 01 	sts	0x0102, r1
 2d8:	10 92 03 01 	sts	0x0103, r1
	}
	
	rf_tx_array[0] = 59; // ;
 2dc:	8b e3       	ldi	r24, 0x3B	; 59
 2de:	80 93 04 01 	sts	0x0104, r24
	rf_tx_array[3] = 42; // *
 2e2:	8a e2       	ldi	r24, 0x2A	; 42
 2e4:	80 93 07 01 	sts	0x0107, r24
	
	config_rx_nRF2401A();
 2e8:	0e 94 94 00 	call	0x128	; 0x128 <config_rx_nRF2401A>
	
	sei();
 2ec:	78 94       	sei
			if(rf_rx_array[1] == 48) LED = 0;//0
			if(rf_rx_array[1] == 49) LED = 8;//1
			if(rf_rx_array[1] == 50) LED = 32;//2
			if(rf_rx_array[1] == 51) LED = 64;//3
			if(rf_rx_array[1] == 52) LED = 128;//4
			if(rf_rx_array[1] == 53) LED = 255;//5
 2ee:	dd 24       	eor	r13, r13
 2f0:	da 94       	dec	r13
		if(rf_rx_array[1] >= 48 && rf_rx_array[1] <= 53){
			if(rf_rx_array[1] == 48) LED = 0;//0
			if(rf_rx_array[1] == 49) LED = 8;//1
			if(rf_rx_array[1] == 50) LED = 32;//2
			if(rf_rx_array[1] == 51) LED = 64;//3
			if(rf_rx_array[1] == 52) LED = 128;//4
 2f2:	f0 e8       	ldi	r31, 0x80	; 128
 2f4:	ef 2e       	mov	r14, r31
		
		if(rf_rx_array[1] >= 48 && rf_rx_array[1] <= 53){
			if(rf_rx_array[1] == 48) LED = 0;//0
			if(rf_rx_array[1] == 49) LED = 8;//1
			if(rf_rx_array[1] == 50) LED = 32;//2
			if(rf_rx_array[1] == 51) LED = 64;//3
 2f6:	e0 e4       	ldi	r30, 0x40	; 64
 2f8:	fe 2e       	mov	r15, r30
		}
		
		if(rf_rx_array[1] >= 48 && rf_rx_array[1] <= 53){
			if(rf_rx_array[1] == 48) LED = 0;//0
			if(rf_rx_array[1] == 49) LED = 8;//1
			if(rf_rx_array[1] == 50) LED = 32;//2
 2fa:	00 e2       	ldi	r16, 0x20	; 32
			}
		}
		
		if(rf_rx_array[1] >= 48 && rf_rx_array[1] <= 53){
			if(rf_rx_array[1] == 48) LED = 0;//0
			if(rf_rx_array[1] == 49) LED = 8;//1
 2fc:	18 e0       	ldi	r17, 0x08	; 8
	
	sei();
	
	for(;;)
	{	
		if (_01A_PORT_PIN & (1<<_01A_DR))
 2fe:	4e 9b       	sbis	0x09, 6	; 9
 300:	16 c0       	rjmp	.+44     	; 0x32e <main+0x82>
		{
			rx_data_nRF2401A();
 302:	0e 94 48 00 	call	0x90	; 0x90 <rx_data_nRF2401A>
			
			if (rf_rx_array[0] == 59 && rf_rx_array[1] == rf_rx_array[2] && rf_rx_array[3] == 42)
 306:	80 91 00 01 	lds	r24, 0x0100
 30a:	8b 33       	cpi	r24, 0x3B	; 59
 30c:	81 f4       	brne	.+32     	; 0x32e <main+0x82>
 30e:	90 91 01 01 	lds	r25, 0x0101
 312:	80 91 02 01 	lds	r24, 0x0102
 316:	98 17       	cp	r25, r24
 318:	51 f4       	brne	.+20     	; 0x32e <main+0x82>
 31a:	80 91 03 01 	lds	r24, 0x0103
 31e:	8a 32       	cpi	r24, 0x2A	; 42
 320:	31 f4       	brne	.+12     	; 0x32e <main+0x82>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 322:	80 91 c0 00 	lds	r24, 0x00C0
 326:	85 ff       	sbrs	r24, 5
 328:	fc cf       	rjmp	.-8      	; 0x322 <main+0x76>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
 32a:	90 93 c6 00 	sts	0x00C6, r25
			{
				put_char(rf_rx_array[1]);
			}
		}
		
		if(rf_rx_array[1] >= 48 && rf_rx_array[1] <= 53){
 32e:	90 91 01 01 	lds	r25, 0x0101
 332:	89 2f       	mov	r24, r25
 334:	80 53       	subi	r24, 0x30	; 48
 336:	86 30       	cpi	r24, 0x06	; 6
 338:	10 f7       	brcc	.-60     	; 0x2fe <main+0x52>
			if(rf_rx_array[1] == 48) LED = 0;//0
 33a:	90 33       	cpi	r25, 0x30	; 48
 33c:	19 f4       	brne	.+6      	; 0x344 <main+0x98>
 33e:	10 92 b3 00 	sts	0x00B3, r1
 342:	dd cf       	rjmp	.-70     	; 0x2fe <main+0x52>
			if(rf_rx_array[1] == 49) LED = 8;//1
 344:	91 33       	cpi	r25, 0x31	; 49
 346:	19 f4       	brne	.+6      	; 0x34e <main+0xa2>
 348:	10 93 b3 00 	sts	0x00B3, r17
 34c:	d8 cf       	rjmp	.-80     	; 0x2fe <main+0x52>
			if(rf_rx_array[1] == 50) LED = 32;//2
 34e:	92 33       	cpi	r25, 0x32	; 50
 350:	19 f4       	brne	.+6      	; 0x358 <main+0xac>
 352:	00 93 b3 00 	sts	0x00B3, r16
 356:	d3 cf       	rjmp	.-90     	; 0x2fe <main+0x52>
			if(rf_rx_array[1] == 51) LED = 64;//3
 358:	93 33       	cpi	r25, 0x33	; 51
 35a:	19 f4       	brne	.+6      	; 0x362 <main+0xb6>
 35c:	f0 92 b3 00 	sts	0x00B3, r15
 360:	ce cf       	rjmp	.-100    	; 0x2fe <main+0x52>
			if(rf_rx_array[1] == 52) LED = 128;//4
 362:	94 33       	cpi	r25, 0x34	; 52
 364:	19 f4       	brne	.+6      	; 0x36c <main+0xc0>
 366:	e0 92 b3 00 	sts	0x00B3, r14
 36a:	c9 cf       	rjmp	.-110    	; 0x2fe <main+0x52>
			if(rf_rx_array[1] == 53) LED = 255;//5
 36c:	95 33       	cpi	r25, 0x35	; 53
 36e:	39 f6       	brne	.-114    	; 0x2fe <main+0x52>
 370:	d0 92 b3 00 	sts	0x00B3, r13
 374:	c4 cf       	rjmp	.-120    	; 0x2fe <main+0x52>

00000376 <uart_getchar>:
}


uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
 376:	80 91 c0 00 	lds	r24, 0x00C0
 37a:	87 ff       	sbrs	r24, 7
 37c:	fc cf       	rjmp	.-8      	; 0x376 <uart_getchar>
    return(UDR0);
 37e:	80 91 c6 00 	lds	r24, 0x00C6
}
 382:	08 95       	ret

00000384 <put_char>:

void put_char(char byte)
{
 384:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 386:	80 91 c0 00 	lds	r24, 0x00C0
 38a:	85 ff       	sbrs	r24, 5
 38c:	fc cf       	rjmp	.-8      	; 0x386 <put_char+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
 38e:	90 93 c6 00 	sts	0x00C6, r25
}
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
