
nRF_USB2Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000012  00800100  00800100  0000054a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f0  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000042c  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b7  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ed  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018e  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001c4  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 01 	call	0x312	; 0x312 <main>
  88:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <rx_data_nRF2401A>:
{
    uint8_t i, j, temp;
	
	temp = 0;
	
	cbi(_01A_PORT, _01A_CE);//Power down RF Front end
  90:	5e 98       	cbi	0x0b, 6	; 11
  92:	e0 e0       	ldi	r30, 0x00	; 0
  94:	f1 e0       	ldi	r31, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0d c0       	rjmp	.+26     	; 0xb4 <rx_data_nRF2401A+0x24>
    //Clock in data, we are setup for 32-bit payloads
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        for(j = 0 ; j < 8 ; j++) //8 bits each
        {
            temp <<= 1;
  9a:	99 0f       	add	r25, r25
			if(_01A_PORT_PIN & (1<<_01A_DATA)) temp |= 1;
  9c:	4d 99       	sbic	0x09, 5	; 9
  9e:	91 60       	ori	r25, 0x01	; 1

			sbi(_01A_PORT, _01A_CLK);
  a0:	5c 9a       	sbi	0x0b, 4	; 11

			cbi(_01A_PORT, _01A_CLK);
  a2:	5c 98       	cbi	0x0b, 4	; 11
	cbi(_01A_PORT, _01A_CE);//Power down RF Front end

    //Clock in data, we are setup for 32-bit payloads
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        for(j = 0 ; j < 8 ; j++) //8 bits each
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	c1 f7       	brne	.-16     	; 0x9a <rx_data_nRF2401A+0xa>
			sbi(_01A_PORT, _01A_CLK);

			cbi(_01A_PORT, _01A_CLK);
        }

        rf_rx_array[i] = temp; //Store this byte
  aa:	91 93       	st	Z+, r25
	temp = 0;
	
	cbi(_01A_PORT, _01A_CE);//Power down RF Front end

    //Clock in data, we are setup for 32-bit payloads
    for(i = 0 ; i < 4 ; i++) //4 bytes
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	e4 30       	cpi	r30, 0x04	; 4
  b0:	f8 07       	cpc	r31, r24
  b2:	11 f0       	breq	.+4      	; 0xb8 <rx_data_nRF2401A+0x28>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <rx_data_nRF2401A+0xa>
        }

        rf_rx_array[i] = temp; //Store this byte
    }

    sbi(_01A_PORT, _01A_CE); //Power up RF Front end
  b8:	5e 9a       	sbi	0x0b, 6	; 11
}
  ba:	08 95       	ret

000000bc <tx_data_nRF2401A>:
//data_array must be setup before calling this function
void tx_data_nRF2401A(void)
{
    uint8_t i, j, temp, rf_address;

    sbi(_01A_PORT, _01A_CE); //_01A_CE = 1;
  bc:	5e 9a       	sbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <tx_data_nRF2401A+0x4>
  c4:	30 e0       	ldi	r19, 0x00	; 0
	
			sbi(_01A_PORT, _01A_CLK); //_01A_CLK = 1; 
			_delay_loop_1(RF_DELAY);
			cbi(_01A_PORT, _01A_CLK); //_01A_CLK = 0;
			
			rf_address <<= 1;
  c6:	42 e3       	ldi	r20, 0x32	; 50
  c8:	11 c0       	rjmp	.+34     	; 0xec <tx_data_nRF2401A+0x30>
  ca:	99 0f       	add	r25, r25
	{
		rf_address = 0b11100111; //Power-on Default for all units (on page 11)
	
		for(i = 0 ; i < 8 ; i++)
		{
			if(rf_address & 0x80)
  cc:	97 ff       	sbrs	r25, 7
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <tx_data_nRF2401A+0x18>
				sbi(_01A_PORT, _01A_DATA);
  d0:	5d 9a       	sbi	0x0b, 5	; 11
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <tx_data_nRF2401A+0x1a>
			else
				cbi(_01A_PORT, _01A_DATA);
  d4:	5d 98       	cbi	0x0b, 5	; 11
	
			sbi(_01A_PORT, _01A_CLK); //_01A_CLK = 1; 
  d6:	5c 9a       	sbi	0x0b, 4	; 11
  d8:	84 2f       	mov	r24, r20
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <tx_data_nRF2401A+0x1e>
			_delay_loop_1(RF_DELAY);
			cbi(_01A_PORT, _01A_CLK); //_01A_CLK = 0;
  de:	5c 98       	cbi	0x0b, 4	; 11
    //Clock in address
	for (j = 0; j < 5; j++)
	{
		rf_address = 0b11100111; //Power-on Default for all units (on page 11)
	
		for(i = 0 ; i < 8 ; i++)
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	91 f7       	brne	.-28     	; 0xca <tx_data_nRF2401A+0xe>

    sbi(_01A_PORT, _01A_CE); //_01A_CE = 1;
    _delay_loop_1(RF_DELAY);

    //Clock in address
	for (j = 0; j < 5; j++)
  e6:	3f 5f       	subi	r19, 0xFF	; 255
  e8:	35 30       	cpi	r19, 0x05	; 5
  ea:	19 f0       	breq	.+6      	; 0xf2 <tx_data_nRF2401A+0x36>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	97 ee       	ldi	r25, 0xE7	; 231
  f0:	ed cf       	rjmp	.-38     	; 0xcc <tx_data_nRF2401A+0x10>
  f2:	e8 e0       	ldi	r30, 0x08	; 8
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	32 e3       	ldi	r19, 0x32	; 50
	}	
    
    //Clock in the data_array
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        temp = rf_tx_array[i];
  f8:	20 81       	ld	r18, Z
  fa:	90 e0       	ldi	r25, 0x00	; 0
        
        for(j = 0 ; j < 8 ; j++) //One bit at a time
        {
			if(temp & 0x80)
  fc:	27 ff       	sbrs	r18, 7
  fe:	02 c0       	rjmp	.+4      	; 0x104 <tx_data_nRF2401A+0x48>
				sbi(_01A_PORT, _01A_DATA);
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	01 c0       	rjmp	.+2      	; 0x106 <tx_data_nRF2401A+0x4a>
			else
				cbi(_01A_PORT, _01A_DATA);
 104:	5d 98       	cbi	0x0b, 5	; 11
			
			sbi(_01A_PORT, _01A_CLK); //_01A_CLK = 1; 
 106:	5c 9a       	sbi	0x0b, 4	; 11
 108:	83 2f       	mov	r24, r19
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <tx_data_nRF2401A+0x4e>
			_delay_loop_1(RF_DELAY);
			cbi(_01A_PORT, _01A_CLK); //_01A_CLK = 0;
 10e:	5c 98       	cbi	0x0b, 4	; 11
    //Clock in the data_array
    for(i = 0 ; i < 4 ; i++) //4 bytes
    {
        temp = rf_tx_array[i];
        
        for(j = 0 ; j < 8 ; j++) //One bit at a time
 110:	9f 5f       	subi	r25, 0xFF	; 255
 112:	98 30       	cpi	r25, 0x08	; 8
 114:	11 f0       	breq	.+4      	; 0x11a <tx_data_nRF2401A+0x5e>
			
			sbi(_01A_PORT, _01A_CLK); //_01A_CLK = 1; 
			_delay_loop_1(RF_DELAY);
			cbi(_01A_PORT, _01A_CLK); //_01A_CLK = 0;
	
            temp <<= 1;
 116:	22 0f       	add	r18, r18
 118:	f1 cf       	rjmp	.-30     	; 0xfc <tx_data_nRF2401A+0x40>
 11a:	31 96       	adiw	r30, 0x01	; 1
			rf_address <<= 1;
		}
	}	
    
    //Clock in the data_array
    for(i = 0 ; i < 4 ; i++) //4 bytes
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	ec 30       	cpi	r30, 0x0C	; 12
 120:	f8 07       	cpc	r31, r24
 122:	51 f7       	brne	.-44     	; 0xf8 <tx_data_nRF2401A+0x3c>
	
            temp <<= 1;
        }
    }
    
	cbi(_01A_PORT, _01A_CE); //_01A_CE = 0; //Start transmission   
 124:	5e 98       	cbi	0x0b, 6	; 11
}
 126:	08 95       	ret

00000128 <config_rx_nRF2401A>:
    uint8_t i, j;
    uint32_t config_setup;

    //During configuration of the receiver, we need _01A_DATA as an output
    //1 = output, 0 = input
    _01A_PORT_DD |= (1<<_01A_DATA);  //(_01A_DR is input) (_01A_DATA is output)
 128:	55 9a       	sbi	0x0a, 5	; 10

    //Config Mode
    cbi(_01A_PORT, _01A_CE); //_01A_CE = 0; _01A_CS = 1;
 12a:	5e 98       	cbi	0x0b, 6	; 11
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	98 2f       	mov	r25, r24
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <config_rx_nRF2401A+0x8>
    _delay_loop_1(RF_DELAY);
	sbi(_01A_PORT, _01A_CS);
 134:	5a 9a       	sbi	0x0b, 2	; 11
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <config_rx_nRF2401A+0xe>
 13a:	40 e0       	ldi	r20, 0x00	; 0

			sbi(_01A_PORT, _01A_CLK);
			_delay_loop_1(RF_DELAY);
			cbi(_01A_PORT, _01A_CLK);
			
			config_setup <<= 1;
 13c:	52 e3       	ldi	r21, 0x32	; 50
 13e:	14 c0       	rjmp	.+40     	; 0x168 <config_rx_nRF2401A+0x40>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	aa 1f       	adc	r26, r26
 146:	bb 1f       	adc	r27, r27
	{
		config_setup = 0xE7;

		for(i = 0 ; i < 8 ; i++)
		{
			if(config_setup & 0x80)
 148:	87 ff       	sbrs	r24, 7
 14a:	02 c0       	rjmp	.+4      	; 0x150 <config_rx_nRF2401A+0x28>
				sbi(_01A_PORT, _01A_DATA);
 14c:	5d 9a       	sbi	0x0b, 5	; 11
 14e:	01 c0       	rjmp	.+2      	; 0x152 <config_rx_nRF2401A+0x2a>
			else
				cbi(_01A_PORT, _01A_DATA);
 150:	5d 98       	cbi	0x0b, 5	; 11

			sbi(_01A_PORT, _01A_CLK);
 152:	5c 9a       	sbi	0x0b, 4	; 11
 154:	25 2f       	mov	r18, r21
 156:	2a 95       	dec	r18
 158:	f1 f7       	brne	.-4      	; 0x156 <config_rx_nRF2401A+0x2e>
			_delay_loop_1(RF_DELAY);
			cbi(_01A_PORT, _01A_CLK);
 15a:	5c 98       	cbi	0x0b, 4	; 11
	//Channel 1 40-bit (5-byte) address setup
    for(j = 0 ; j < 5 ; j++)
	{
		config_setup = 0xE7;

		for(i = 0 ; i < 8 ; i++)
 15c:	3f 5f       	subi	r19, 0xFF	; 255
 15e:	38 30       	cpi	r19, 0x08	; 8
 160:	79 f7       	brne	.-34     	; 0x140 <config_rx_nRF2401A+0x18>
    //Delay of 5us from CS to Data (page 30) is taken care of by the for loop
    _delay_loop_1(RF_DELAY);
	
    //Setup configuration bank	
	//Channel 1 40-bit (5-byte) address setup
    for(j = 0 ; j < 5 ; j++)
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	45 30       	cpi	r20, 0x05	; 5
 166:	31 f0       	breq	.+12     	; 0x174 <config_rx_nRF2401A+0x4c>
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	87 ee       	ldi	r24, 0xE7	; 231
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	ea cf       	rjmp	.-44     	; 0x148 <config_rx_nRF2401A+0x20>
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	81 e2       	ldi	r24, 0x21	; 33
 178:	9e e6       	ldi	r25, 0x6E	; 110
 17a:	a3 ea       	ldi	r26, 0xA3	; 163
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	52 e3       	ldi	r21, 0x32	; 50
	//config_setup = 0x00A36E21; //0b.1010.0011. 0110.1110. 0010.0001;
	config_setup = 0xA36E21;

    for(i = 0 ; i < 24 ; i++)
    {
		if(config_setup & 0x00800000)
 180:	a7 ff       	sbrs	r26, 7
 182:	02 c0       	rjmp	.+4      	; 0x188 <config_rx_nRF2401A+0x60>
			sbi(_01A_PORT, _01A_DATA);
 184:	5d 9a       	sbi	0x0b, 5	; 11
 186:	01 c0       	rjmp	.+2      	; 0x18a <config_rx_nRF2401A+0x62>
		else
			cbi(_01A_PORT, _01A_DATA);
 188:	5d 98       	cbi	0x0b, 5	; 11

		sbi(_01A_PORT, _01A_CLK);
 18a:	5c 9a       	sbi	0x0b, 4	; 11
 18c:	42 e3       	ldi	r20, 0x32	; 50
 18e:	25 2f       	mov	r18, r21
 190:	2a 95       	dec	r18
 192:	f1 f7       	brne	.-4      	; 0x190 <config_rx_nRF2401A+0x68>
		_delay_loop_1(RF_DELAY);
		cbi(_01A_PORT, _01A_CLK);
 194:	5c 98       	cbi	0x0b, 4	; 11
	//Lower 24 bit setup
    //Set last bit for receive mode
	//config_setup = 0x00A36E21; //0b.1010.0011. 0110.1110. 0010.0001;
	config_setup = 0xA36E21;

    for(i = 0 ; i < 24 ; i++)
 196:	3f 5f       	subi	r19, 0xFF	; 255
 198:	38 31       	cpi	r19, 0x18	; 24
 19a:	29 f0       	breq	.+10     	; 0x1a6 <config_rx_nRF2401A+0x7e>

		sbi(_01A_PORT, _01A_CLK);
		_delay_loop_1(RF_DELAY);
		cbi(_01A_PORT, _01A_CLK);
        
        config_setup <<= 1;
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	ed cf       	rjmp	.-38     	; 0x180 <config_rx_nRF2401A+0x58>
    }
    
    //Configuration is actived on falling edge of CS (page 10)
    cbi(_01A_PORT, _01A_CE); //_01A_CE = 0; _01A_CS = 0;
 1a6:	5e 98       	cbi	0x0b, 6	; 11
 1a8:	84 2f       	mov	r24, r20
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <config_rx_nRF2401A+0x82>
    _delay_loop_1(RF_DELAY);
	cbi(_01A_PORT, _01A_CS);
 1ae:	5a 98       	cbi	0x0b, 2	; 11
 1b0:	84 2f       	mov	r24, r20
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <config_rx_nRF2401A+0x8a>
    _delay_loop_1(RF_DELAY);
    
    //After configuration of the receiver, we need _01A_DATA as an input
    //1 = output, 0 = input
    _01A_PORT_DD &= ~((1<<_01A_DR)|(1<<_01A_DATA));  //(_01A_DR is input) (_01A_DATA is input)
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	87 7d       	andi	r24, 0xD7	; 215
 1ba:	8a b9       	out	0x0a, r24	; 10

    //Start monitoring the air
    sbi(_01A_PORT, _01A_CE); //_01A_CE = 1; _01A_CS = 0;
 1bc:	5e 9a       	sbi	0x0b, 6	; 11
 1be:	84 2f       	mov	r24, r20
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <config_rx_nRF2401A+0x98>
    _delay_loop_1(RF_DELAY);
	cbi(_01A_PORT, _01A_CS);
 1c4:	5a 98       	cbi	0x0b, 2	; 11
}    
 1c6:	08 95       	ret

000001c8 <config_tx_nRF2401A>:
void config_tx_nRF2401A(void)
{
    uint8_t i;
    uint32_t config_setup;
	
	_01A_PORT_DD |= (1<<_01A_DATA);
 1c8:	55 9a       	sbi	0x0a, 5	; 10

    //Config Mode
    cbi(_01A_PORT, _01A_CE); //_01A_CE = 0; 
 1ca:	5e 98       	cbi	0x0b, 6	; 11
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	98 2f       	mov	r25, r24
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <config_tx_nRF2401A+0x8>
    _delay_loop_1(RF_DELAY);
	sbi(_01A_PORT, _01A_CS); //_01A_CS = 1;
 1d4:	5a 9a       	sbi	0x0b, 2	; 11
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <config_tx_nRF2401A+0xe>
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	9e e6       	ldi	r25, 0x6E	; 110
 1e0:	a3 ea       	ldi	r26, 0xA3	; 163
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
    //Setup configuration word
	//config_setup = 0x00A36E20; //0b.1010.0011. 0110.1110. 0010.0000; //Look at pages 13-15 for more bit info

    for(i = 0 ; i < 24 ; i++)
    {
		if(config_setup & 0x00800000)
 1e4:	42 e3       	ldi	r20, 0x32	; 50
 1e6:	a7 ff       	sbrs	r26, 7
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <config_tx_nRF2401A+0x26>
			sbi(_01A_PORT, _01A_DATA);
 1ea:	5d 9a       	sbi	0x0b, 5	; 11
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <config_tx_nRF2401A+0x28>
		else
			cbi(_01A_PORT, _01A_DATA);
 1ee:	5d 98       	cbi	0x0b, 5	; 11
		
		sbi(_01A_PORT, _01A_CLK); //_01A_CLK = 1;
 1f0:	5c 9a       	sbi	0x0b, 4	; 11
 1f2:	24 2f       	mov	r18, r20
 1f4:	2a 95       	dec	r18
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <config_tx_nRF2401A+0x2c>
		_delay_loop_1(RF_DELAY);
		cbi(_01A_PORT, _01A_CLK); //_01A_CLK = 0; 
 1f8:	5c 98       	cbi	0x0b, 4	; 11
	
	config_setup = 0xA36E20;
    //Setup configuration word
	//config_setup = 0x00A36E20; //0b.1010.0011. 0110.1110. 0010.0000; //Look at pages 13-15 for more bit info

    for(i = 0 ; i < 24 ; i++)
 1fa:	3f 5f       	subi	r19, 0xFF	; 255
 1fc:	38 31       	cpi	r19, 0x18	; 24
 1fe:	29 f0       	breq	.+10     	; 0x20a <config_tx_nRF2401A+0x42>
		
		sbi(_01A_PORT, _01A_CLK); //_01A_CLK = 1;
		_delay_loop_1(RF_DELAY);
		cbi(_01A_PORT, _01A_CLK); //_01A_CLK = 0; 

        config_setup <<= 1;
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	aa 1f       	adc	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	ee cf       	rjmp	.-36     	; 0x1e6 <config_tx_nRF2401A+0x1e>
    }
    
    //Configuration is actived on falling edge of CS (page 10)
    cbi(_01A_PORT, _01A_CE); //_01A_CE = 0; 
 20a:	5e 98       	cbi	0x0b, 6	; 11
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <config_tx_nRF2401A+0x46>
    _delay_loop_1(RF_DELAY);
	cbi(_01A_PORT, _01A_CS); //_01A_CS = 0;
 212:	5a 98       	cbi	0x0b, 2	; 11
}
 214:	08 95       	ret

00000216 <__vector_18>:
//======================



ISR (SIG_USART_RECV)//USART
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	cli();//Desabilita Interrupcoes
 238:	f8 94       	cli
	
	rf_tx_array[1] = rf_tx_array[2] = UDR0;
 23a:	80 91 c6 00 	lds	r24, 0x00C6
 23e:	80 93 0a 01 	sts	0x010A, r24
 242:	80 93 09 01 	sts	0x0109, r24
	
	config_tx_nRF2401A();
 246:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <config_tx_nRF2401A>
	tx_data_nRF2401A();
 24a:	0e 94 5e 00 	call	0xbc	; 0xbc <tx_data_nRF2401A>
	config_rx_nRF2401A();
 24e:	0e 94 94 00 	call	0x128	; 0x128 <config_rx_nRF2401A>
	
	sei();//Habilita Interrupcoes
 252:	78 94       	sei
	
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <initPWM>:
	}
}

void initPWM(){
   //3 Canais PWM em PB1, PB2 and PB3
   DDRB |= 0b00001110 ;   //PB1, PB2 e PB3 sao saidas
 276:	84 b1       	in	r24, 0x04	; 4
 278:	8e 60       	ori	r24, 0x0E	; 14
 27a:	84 b9       	out	0x04, r24	; 4
   BLUE = GREEN = RED = 0;   //PWMs comecam em zero
 27c:	10 92 b3 00 	sts	0x00B3, r1
 280:	ea e8       	ldi	r30, 0x8A	; 138
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	11 82       	std	Z+1, r1	; 0x01
 286:	10 82       	st	Z, r1
 288:	80 81       	ld	r24, Z
 28a:	91 81       	ldd	r25, Z+1	; 0x01
 28c:	90 93 89 00 	sts	0x0089, r25
 290:	80 93 88 00 	sts	0x0088, r24
   //timer 1 - 8 bit Fast PWM - no pre-scaler - non-inverting
   //timer 2 - 8 bit Fast PWM - no pre-scaler - non-inverting
   TCCR1B = (0 << WGM13) | (1<<WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
 294:	89 e0       	ldi	r24, 0x09	; 9
 296:	80 93 81 00 	sts	0x0081, r24
   TCCR1A = (0 << WGM11) | (1<<WGM10) | (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (0 << COM1B0);
 29a:	81 ea       	ldi	r24, 0xA1	; 161
 29c:	80 93 80 00 	sts	0x0080, r24
   TCCR2A = (1 << WGM21) | (1<<WGM20) | (1 << COM2A1) | (0 << COM2A0);
 2a0:	83 e8       	ldi	r24, 0x83	; 131
 2a2:	80 93 b0 00 	sts	0x00B0, r24
   TCCR2B = (0 << CS22) | (0 << CS21) | (1 << CS20);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 b1 00 	sts	0x00B1, r24
}
 2ac:	08 95       	ret

000002ae <ioinit>:
	//1 = saida, 0 = entrada
	//DDRD |= 0b00000010;  //(TXD on PD1)
	//DDRD &= ~(0b00000001);  //(RXD on PD0)
	
	//1 = saida, 0 = entrada
	DDRD = 0b01010110;
 2ae:	86 e5       	ldi	r24, 0x56	; 86
 2b0:	8a b9       	out	0x0a, r24	; 10
	
	//PORTC; 1 = habilita resistor pullup
	PORTC = 0b00000001;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	88 b9       	out	0x08, r24	; 8
	DDRC = 0b00000000;
 2b6:	17 b8       	out	0x07, r1	; 7

	//USART Baud rate: 9600
	UBRR0H = (MYUBRR>>8);
 2b8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = MYUBRR;
 2bc:	87 e6       	ldi	r24, 0x67	; 103
 2be:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 2c2:	88 e9       	ldi	r24, 0x98	; 152
 2c4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2c8:	8e e0       	ldi	r24, 0x0E	; 14
 2ca:	80 93 c2 00 	sts	0x00C2, r24
}
 2ce:	08 95       	ret

000002d0 <uart_getchar>:


uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	87 ff       	sbrs	r24, 7
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <uart_getchar>
    return(UDR0);
 2d8:	80 91 c6 00 	lds	r24, 0x00C6
}
 2dc:	08 95       	ret

000002de <put_char>:

void put_char(char byte)
{
 2de:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 2e0:	80 91 c0 00 	lds	r24, 0x00C0
 2e4:	85 ff       	sbrs	r24, 5
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <put_char+0x2>
	UDR0 = byte;
 2e8:	90 93 c6 00 	sts	0x00C6, r25
}
 2ec:	08 95       	ret

000002ee <hex_to_dec>:

uint8_t hex_to_dec(char hex)
{
 2ee:	98 2f       	mov	r25, r24
   if (hex > 47 && hex <58) return (hex - 48);
 2f0:	80 53       	subi	r24, 0x30	; 48
 2f2:	8a 30       	cpi	r24, 0x0A	; 10
 2f4:	68 f0       	brcs	.+26     	; 0x310 <hex_to_dec+0x22>
   if (hex > 64 && hex <71) return (hex - 55);
 2f6:	81 51       	subi	r24, 0x11	; 17
 2f8:	86 30       	cpi	r24, 0x06	; 6
 2fa:	10 f4       	brcc	.+4      	; 0x300 <hex_to_dec+0x12>
 2fc:	86 5f       	subi	r24, 0xF6	; 246
 2fe:	08 95       	ret
   if (hex > 96 && hex <103) return (hex - 87);
 300:	89 2f       	mov	r24, r25
 302:	81 56       	subi	r24, 0x61	; 97
 304:	86 30       	cpi	r24, 0x06	; 6
 306:	10 f0       	brcs	.+4      	; 0x30c <hex_to_dec+0x1e>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
 30c:	89 2f       	mov	r24, r25
 30e:	87 55       	subi	r24, 0x57	; 87
   
   return 0;
}
 310:	08 95       	ret

00000312 <main>:
	sei();//Habilita Interrupcoes
	
}

int main(void)
{
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
	int x=0;
	
	ioinit();
 316:	0e 94 57 01 	call	0x2ae	; 0x2ae <ioinit>
	initPWM();
 31a:	0e 94 3b 01 	call	0x276	; 0x276 <initPWM>
	
	RED = GREEN = BLUE = 0;
 31e:	10 92 89 00 	sts	0x0089, r1
 322:	10 92 88 00 	sts	0x0088, r1
 326:	80 91 88 00 	lds	r24, 0x0088
 32a:	90 91 89 00 	lds	r25, 0x0089
 32e:	90 93 8b 00 	sts	0x008B, r25
 332:	80 93 8a 00 	sts	0x008A, r24
 336:	80 91 8a 00 	lds	r24, 0x008A
 33a:	90 91 8b 00 	lds	r25, 0x008B
 33e:	80 93 b3 00 	sts	0x00B3, r24

	for (x = 0; x < 4; x++)
	{
		rf_rx_array[x] = 0;
 342:	10 92 00 01 	sts	0x0100, r1
 346:	10 92 01 01 	sts	0x0101, r1
 34a:	10 92 02 01 	sts	0x0102, r1
 34e:	10 92 03 01 	sts	0x0103, r1
	}
	
	rf_tx_array[0] = 59; // ;
 352:	8b e3       	ldi	r24, 0x3B	; 59
 354:	80 93 08 01 	sts	0x0108, r24
	rf_tx_array[3] = 42; // *
 358:	8a e2       	ldi	r24, 0x2A	; 42
 35a:	80 93 0b 01 	sts	0x010B, r24
	
	config_rx_nRF2401A();
 35e:	0e 94 94 00 	call	0x128	; 0x128 <config_rx_nRF2401A>
	
	sei();
 362:	78 94       	sei
	
	for(;;)
	{	
		if (_01A_PORT_PIN & (1<<_01A_DR)) //Recebeu algumna coisa
 364:	4b 9b       	sbis	0x09, 3	; 9
 366:	fe cf       	rjmp	.-4      	; 0x364 <main+0x52>
		{
			rx_data_nRF2401A();
 368:	0e 94 48 00 	call	0x90	; 0x90 <rx_data_nRF2401A>
			
			if (rf_rx_array[0] == 59 && rf_rx_array[1] == rf_rx_array[2] && rf_rx_array[3] == 42) //Msg Valida
 36c:	80 91 00 01 	lds	r24, 0x0100
 370:	8b 33       	cpi	r24, 0x3B	; 59
 372:	c1 f7       	brne	.-16     	; 0x364 <main+0x52>
 374:	90 91 01 01 	lds	r25, 0x0101
 378:	80 91 02 01 	lds	r24, 0x0102
 37c:	98 17       	cp	r25, r24
 37e:	91 f7       	brne	.-28     	; 0x364 <main+0x52>
 380:	80 91 03 01 	lds	r24, 0x0103
 384:	8a 32       	cpi	r24, 0x2A	; 42
 386:	71 f7       	brne	.-36     	; 0x364 <main+0x52>
			{
                //Joga dado no buff FIFO
				for(x = 0; x < 3; x++){
                    buff[x] = buff[x+1];
 388:	80 91 05 01 	lds	r24, 0x0105
 38c:	80 93 04 01 	sts	0x0104, r24
 390:	80 91 06 01 	lds	r24, 0x0106
 394:	80 93 05 01 	sts	0x0105, r24
 398:	80 91 07 01 	lds	r24, 0x0107
 39c:	80 93 06 01 	sts	0x0106, r24
                }
                buff[x] = rf_rx_array[1];
 3a0:	90 93 07 01 	sts	0x0107, r25
                printf("%c",buff[x]);
 3a4:	80 91 07 01 	lds	r24, 0x0107
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 36 02 	call	0x46c	; 0x46c <putchar>
                
                //Se string no buff bate com o esperado, muda valor do PWM do led especificado
                if ( (buff[0] == 'R' || buff[0] == 'r') && buff[3] == ';'){
 3ae:	80 91 04 01 	lds	r24, 0x0104
 3b2:	82 35       	cpi	r24, 0x52	; 82
 3b4:	21 f0       	breq	.+8      	; 0x3be <main+0xac>
 3b6:	80 91 04 01 	lds	r24, 0x0104
 3ba:	82 37       	cpi	r24, 0x72	; 114
 3bc:	91 f4       	brne	.+36     	; 0x3e2 <main+0xd0>
 3be:	80 91 07 01 	lds	r24, 0x0107
 3c2:	8b 33       	cpi	r24, 0x3B	; 59
 3c4:	71 f4       	brne	.+28     	; 0x3e2 <main+0xd0>
                    RED = hex_to_dec(buff[1])*16 + hex_to_dec(buff[2]);
 3c6:	80 91 05 01 	lds	r24, 0x0105
 3ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <hex_to_dec>
 3ce:	18 2f       	mov	r17, r24
 3d0:	80 91 06 01 	lds	r24, 0x0106
 3d4:	0e 94 77 01 	call	0x2ee	; 0x2ee <hex_to_dec>
 3d8:	12 95       	swap	r17
 3da:	10 7f       	andi	r17, 0xF0	; 240
 3dc:	18 0f       	add	r17, r24
 3de:	10 93 b3 00 	sts	0x00B3, r17
                }
                if ( (buff[0] == 'G' || buff[0] == 'g') && buff[3] == ';'){
 3e2:	80 91 04 01 	lds	r24, 0x0104
 3e6:	87 34       	cpi	r24, 0x47	; 71
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <main+0xe0>
 3ea:	80 91 04 01 	lds	r24, 0x0104
 3ee:	87 36       	cpi	r24, 0x67	; 103
 3f0:	c9 f4       	brne	.+50     	; 0x424 <main+0x112>
 3f2:	80 91 07 01 	lds	r24, 0x0107
 3f6:	8b 33       	cpi	r24, 0x3B	; 59
 3f8:	a9 f4       	brne	.+42     	; 0x424 <main+0x112>
                    GREEN = hex_to_dec(buff[1])*16 + hex_to_dec(buff[2]);
 3fa:	80 91 05 01 	lds	r24, 0x0105
 3fe:	0e 94 77 01 	call	0x2ee	; 0x2ee <hex_to_dec>
 402:	08 2f       	mov	r16, r24
 404:	80 91 06 01 	lds	r24, 0x0106
 408:	0e 94 77 01 	call	0x2ee	; 0x2ee <hex_to_dec>
 40c:	10 e0       	ldi	r17, 0x00	; 0
 40e:	f4 e0       	ldi	r31, 0x04	; 4
 410:	00 0f       	add	r16, r16
 412:	11 1f       	adc	r17, r17
 414:	fa 95       	dec	r31
 416:	e1 f7       	brne	.-8      	; 0x410 <main+0xfe>
 418:	08 0f       	add	r16, r24
 41a:	11 1d       	adc	r17, r1
 41c:	10 93 8b 00 	sts	0x008B, r17
 420:	00 93 8a 00 	sts	0x008A, r16
                }
                if ( (buff[0] == 'B' || buff[0] == 'b') && buff[3] == ';'){
 424:	80 91 04 01 	lds	r24, 0x0104
 428:	82 34       	cpi	r24, 0x42	; 66
 42a:	29 f0       	breq	.+10     	; 0x436 <main+0x124>
 42c:	80 91 04 01 	lds	r24, 0x0104
 430:	82 36       	cpi	r24, 0x62	; 98
 432:	09 f0       	breq	.+2      	; 0x436 <main+0x124>
 434:	97 cf       	rjmp	.-210    	; 0x364 <main+0x52>
 436:	80 91 07 01 	lds	r24, 0x0107
 43a:	8b 33       	cpi	r24, 0x3B	; 59
 43c:	09 f0       	breq	.+2      	; 0x440 <main+0x12e>
 43e:	92 cf       	rjmp	.-220    	; 0x364 <main+0x52>
                    BLUE = hex_to_dec(buff[1])*16 + hex_to_dec(buff[2]);
 440:	80 91 05 01 	lds	r24, 0x0105
 444:	0e 94 77 01 	call	0x2ee	; 0x2ee <hex_to_dec>
 448:	08 2f       	mov	r16, r24
 44a:	80 91 06 01 	lds	r24, 0x0106
 44e:	0e 94 77 01 	call	0x2ee	; 0x2ee <hex_to_dec>
 452:	10 e0       	ldi	r17, 0x00	; 0
 454:	e4 e0       	ldi	r30, 0x04	; 4
 456:	00 0f       	add	r16, r16
 458:	11 1f       	adc	r17, r17
 45a:	ea 95       	dec	r30
 45c:	e1 f7       	brne	.-8      	; 0x456 <main+0x144>
 45e:	08 0f       	add	r16, r24
 460:	11 1d       	adc	r17, r1
 462:	10 93 89 00 	sts	0x0089, r17
 466:	00 93 88 00 	sts	0x0088, r16
 46a:	7c cf       	rjmp	.-264    	; 0x364 <main+0x52>

0000046c <putchar>:
 46c:	60 91 0e 01 	lds	r22, 0x010E
 470:	70 91 0f 01 	lds	r23, 0x010F
 474:	0e 94 3d 02 	call	0x47a	; 0x47a <fputc>
 478:	08 95       	ret

0000047a <fputc>:
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	8c 01       	movw	r16, r24
 484:	eb 01       	movw	r28, r22
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	81 ff       	sbrs	r24, 1
 48a:	1b c0       	rjmp	.+54     	; 0x4c2 <fputc+0x48>
 48c:	82 ff       	sbrs	r24, 2
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <fputc+0x30>
 490:	2e 81       	ldd	r18, Y+6	; 0x06
 492:	3f 81       	ldd	r19, Y+7	; 0x07
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	9d 81       	ldd	r25, Y+5	; 0x05
 498:	28 17       	cp	r18, r24
 49a:	39 07       	cpc	r19, r25
 49c:	64 f4       	brge	.+24     	; 0x4b6 <fputc+0x3c>
 49e:	e8 81       	ld	r30, Y
 4a0:	f9 81       	ldd	r31, Y+1	; 0x01
 4a2:	01 93       	st	Z+, r16
 4a4:	f9 83       	std	Y+1, r31	; 0x01
 4a6:	e8 83       	st	Y, r30
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <fputc+0x3c>
 4aa:	e8 85       	ldd	r30, Y+8	; 0x08
 4ac:	f9 85       	ldd	r31, Y+9	; 0x09
 4ae:	80 2f       	mov	r24, r16
 4b0:	09 95       	icall
 4b2:	89 2b       	or	r24, r25
 4b4:	31 f4       	brne	.+12     	; 0x4c2 <fputc+0x48>
 4b6:	8e 81       	ldd	r24, Y+6	; 0x06
 4b8:	9f 81       	ldd	r25, Y+7	; 0x07
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	9f 83       	std	Y+7, r25	; 0x07
 4be:	8e 83       	std	Y+6, r24	; 0x06
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <fputc+0x4c>
 4c2:	0f ef       	ldi	r16, 0xFF	; 255
 4c4:	1f ef       	ldi	r17, 0xFF	; 255
 4c6:	c8 01       	movw	r24, r16
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
